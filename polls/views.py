# -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.http import HttpResponseRedirect
from django.shortcuts import render, get_object_or_404
from django.urls import reverse
from django.views import generic

from .models import Choice,Question


# index, detail and results were repetitive, so we used generic views
# we used two generic views ListView e DetailView:
# ListView = "display a list of objects"

# DetailView = "display a detail page for a particular type of object"
# it expects the primary key value captured from the URL to be called "pk"

'''
By default, the DetailView generic view uses a template called
<app name>/<model name>_detail.html. In our case, it would use
the template "polls/question_detail.html". The template_name attribute
is used to tell Django to use a specific template name instead of
the autogenerated default template name.

Similarly, the ListView generic view uses a default template called
<app name>/<model name>_list.html; we use template_name to tell
ListView to use our existing "polls/index.html" template.

Before this new changes, the templates have been provided
with a context that contains the question and latest_question_list
context variables. For DetailView the question variable is provided
automatically – since we’re using a Django model (Question), Django
is able to determine an appropriate name for the context variable.
However, for ListView, the automatically generated context variable
is question_list. To override this we provide the context_object_name
attribute, specifying that we want to use latest_question_list instead.
As an alternative approach, you could change your templates to match
the new default context variables – but it’s a lot easier to just tell
Django to use the variable you want.
'''

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """ Return the last five published questions."""
        return Question.objects.order_by('-pub_date')[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'


# see about race conditions. if two users vote at the same time = problem
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        # request.POST = dictionary-like object that lets you
        # access submitted data by key name. always returns string
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.

        # reverse() helps avoid having to hardcode a URL in the view function
        # it is given the name of the view that we ant to pass control to
        # and the variable portion of the URL pattern that points to that view
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
